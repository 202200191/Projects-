module AND (input logic a,b, output logic y);
assign y= a&b ;
endmodule 

module XOR(input logic a,b, output logic y);
assign y= a^b ;
endmodule 

module AND (input logic a,b, output logic y);
assign y= a&b ;
endmodule 

module XOR(input logic a,b, output logic y);
assign y= a^b ;
endmodule 

module XOR3(input logic a,b,c, output logic y);
logic n1;
 XOR x(a,b,n1);
 XOR x2(n1,c,y);
endmodule 

module OR (input logic a,b, output logic y);
assign y= a|b ;
endmodule 

module NOT (input logic b, output logic y);
assign y= ~b ;
endmodule 



module full_adder_one_bit(input logic a,b,cin,output logic cout,sum);
XOR3 x(a,b,cin,sum);
logic t1,t2,t3;
AND and1(a,b,t1);
XOR x2(a,b,t2);
AND and2(t2,cin,cout);
endmodule

module SUBTRACTOR(input logic[3:0] a,b,output logic[7:0] y);
 logic [3:0]m;
NOT not0(b[0],m[0]);
NOT not1(b[1],m[1]);
NOT not2(b[2],m[2]);
NOT not3(b[3],m[3]);
logic n2;
 full_adder_one_bit fa1(a[0],m[0],1,n2,y[0]);
 full_adder_one_bit fa2(a[1],m[1],n2,n2,y[1]);
 full_adder_one_bit fa3(a[2],m[2],n2,n2,y[2]);
 full_adder_one_bit fa4(a[3],m[3],n2,n2,y[3]);
 assign y[4]=n2;
endmodule






module tb_SUBTRACTOR();

logic [3:0]a,b;
logic [7:0]y;

SUBTRACTOR dut (a,b,y);
initial begin
 
for (int i =0; i<256; i=i+1) 
begin 

{a,b}=i;
#10;


end
end
endmodule 